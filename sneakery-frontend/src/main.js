import { createApp } from 'vue'
import { createPinia } from 'pinia' // üëà 1. Import Pinia
import axios from 'axios'
import { ElMessage } from 'element-plus'

import App from './App.vue'
import router from './routers/index.js'
import ElementPlus from 'element-plus'
import 'element-plus/dist/index.css'

// Import custom CSS - Modular Architecture
import './assets/styles/main.css' // üé® Modular CSS Architecture v·ªõi 25+ files

const app = createApp(App)
const pinia = createPinia() // üëà 2. T·∫°o m·ªôt instance c·ªßa Pinia

// ‚öôÔ∏è C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
ElMessage.defaults = {
  offset: 20,      // c√°ch m√©p tr√™n 20px
  showClose: true, // c√≥ n√∫t ƒë√≥ng
  grouping: false, // kh√¥ng g·ªôp
  center: false,
  customClass: 'aurora-message'
}

// ============================================
// üîê AXIOS INTERCEPTOR - T·ª∞ ƒê·ªòNG G·ª¨I JWT TOKEN
// ============================================
axios.interceptors.request.use(
  (config) => {
    // L·∫•y token t·ª´ localStorage
    const token = localStorage.getItem('token');
    
    // N·∫øu c√≥ token, th√™m v√†o Authorization header
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// ============================================
// üö® AXIOS RESPONSE INTERCEPTOR - X·ª¨ L√ù L·ªñI
// ============================================
axios.interceptors.response.use(
  (response) => {
    // Tr·∫£ v·ªÅ response n·∫øu th√†nh c√¥ng
    return response;
  },
  (error) => {
    // X·ª≠ l√Ω l·ªói 401 Unauthorized
    if (error.response && error.response.status === 401) {
      // X√≥a token v√† redirect v·ªÅ login
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      
      // Ch·ªâ redirect n·∫øu kh√¥ng ph·∫£i ƒëang ·ªü trang login/register
      if (router.currentRoute.value.path !== '/login' && 
          router.currentRoute.value.path !== '/register') {
        router.push({
          path: '/login',
          query: { redirect: router.currentRoute.value.fullPath }
        });
      }
    }
    
    // X·ª≠ l√Ω l·ªói network
    if (!error.response) {
      console.error('‚ùå Network Error:', error.message);
      ElMessage.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
    }
    
    return Promise.reject(error);
  }
);

app.use(router)
app.use(ElementPlus)
app.use(pinia) // üëà 3. S·ª≠ d·ª•ng Pinia

app.mount('#app')