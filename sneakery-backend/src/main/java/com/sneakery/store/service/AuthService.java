package com.sneakery.store.service;

import com.sneakery.store.dto.AuthResponseDto;
import com.sneakery.store.dto.LoginDto;
import com.sneakery.store.dto.RegisterDto;
import com.sneakery.store.entity.User;
import com.sneakery.store.exception.ApiException;
import com.sneakery.store.repository.UserRepository;
import com.sneakery.store.security.JwtTokenProvider;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final JwtTokenProvider jwtTokenProvider;

    /**
     * X·ª≠ l√Ω logic ƒêƒÉng k√Ω
     */
    public AuthResponseDto register(RegisterDto registerDto) {
        // 1. Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (userRepository.existsByEmail(registerDto.getEmail())) {
            throw new ApiException(HttpStatus.BAD_REQUEST, "Email ƒë√£ t·ªìn t·∫°i!");
        }

        // 2. T·∫°o ƒë·ªëi t∆∞·ª£ng User
        User user = User.builder()
                .fullName(registerDto.getFullName())
                .email(registerDto.getEmail())
                .passwordHash(passwordEncoder.encode(registerDto.getPassword()))
                .phoneNumber(registerDto.getPhoneNumber())
                .role("USER")
                .isActive(true)
                .build();

        // 3. L∆∞u v√†o CSDL
        userRepository.save(user);

        // 4. T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p user sau khi ƒëƒÉng k√Ω th√†nh c√¥ng

        // S·ª¨A L·ªñI: Thay v√¨ d√πng new LoginDto(email, pass),
        // ch√∫ng ta d√πng h√†m kh·ªüi t·∫°o r·ªóng v√† c√°c h√†m setter
        LoginDto loginDto = new LoginDto();
        loginDto.setEmail(registerDto.getEmail());
        loginDto.setPassword(registerDto.getPassword());

        return login(loginDto); // G·ªçi h√†m login() ·ªü d∆∞·ªõi
    }

    /**
     * X·ª≠ l√Ω logic ƒêƒÉng nh·∫≠p
     */
    public AuthResponseDto login(LoginDto loginDto) {
    final String email = loginDto.getEmail();
    final String raw = loginDto.getPassword();

    // üîç B1: Log input (ch·ªâ b·∫≠t t·∫°m khi debug; kh√¥ng log password ·ªü prod)
    System.out.println("üß© Login attempt -> email=" + email + ", raw=" + raw);

    // üîç B2: T√¨m user theo email v√† so kh·ªõp BCrypt tr∆∞·ªõc khi authenticate
    userRepository.findByEmail(email).ifPresentOrElse(u -> {
        System.out.println("üß© Stored hash: " + u.getPasswordHash());
        boolean matches = passwordEncoder.matches(raw, u.getPasswordHash());
        System.out.println("üß© BCrypt matches? " + matches);
    }, () -> {
        System.out.println("üß© User not found with email=" + email);
    });

    // üîê B3: X√°c th·ª±c
    Authentication authentication = authenticationManager.authenticate(
        new UsernamePasswordAuthenticationToken(email, raw)
    );

    // ‚úÖ B4: Set security context
    SecurityContextHolder.getContext().setAuthentication(authentication);

    // üîë B5: T·∫°o JWT
    String token = jwtTokenProvider.generateToken(authentication);

    // üë§ B6: Tr·∫£ v·ªÅ info
    User user = (User) authentication.getPrincipal();
    return AuthResponseDto.builder()
            .accessToken(token)
            .role(user.getRole())
            .fullName(user.getFullName())
            .userId(user.getId())
            .build();
}

    // public AuthResponseDto login(LoginDto loginDto) {
    //     // 1. X√°c th·ª±c (email + password)
    //     Authentication authentication = authenticationManager.authenticate(
    //             new UsernamePasswordAuthenticationToken(loginDto.getEmail(), loginDto.getPassword())
    //     );

    //     // 2. N·∫øu th√†nh c√¥ng, l∆∞u th√¥ng tin x√°c th·ª±c v√†o SecurityContext
    //     SecurityContextHolder.getContext().setAuthentication(authentication);

    //     // 3. T·∫°o JWT token
    //     String token = jwtTokenProvider.generateToken(authentication);

    //     // 4. L·∫•y th√¥ng tin User (ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c)
    //     User user = (User) authentication.getPrincipal();

    //     // 5. Tr·∫£ v·ªÅ DTO ch·ª©a token v√† th√¥ng tin user cho VueJS
    //     return AuthResponseDto.builder()
    //             .accessToken(token)
    //             .role(user.getRole())
    //             .fullName(user.getFullName())
    //             .userId(user.getId())
    //             .build();
    // }
}