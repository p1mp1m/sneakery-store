package com.sneakery.store.service;

import com.sneakery.store.entity.Order;
import com.sneakery.store.entity.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

/**
 * Service: EmailService (Mock)
 * G·ª≠i email th√¥ng b√°o cho kh√°ch h√†ng
 * TODO: T√≠ch h·ª£p SMTP server th·∫≠t khi deploy production
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class EmailService {

    /**
     * G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
     */
    public void sendOrderConfirmationEmail(Order order) {
        log.info("üìß [MOCK] Sending order confirmation email to: {}", order.getUser().getEmail());
        log.info("Order ID: {}, Total: {}", order.getId(), order.getTotalAmount());
        
        // TODO: Implement real email sending logic
        // Example: use JavaMailSender or third-party service (SendGrid, AWS SES)
        
        String emailBody = buildOrderConfirmationEmail(order);
        log.debug("Email body: \n{}", emailBody);
    }

    /**
     * G·ª≠i email th√¥ng b√°o ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao cho ƒêVVC
     */
    public void sendOrderShippedEmail(Order order, String trackingNumber) {
        log.info("üìß [MOCK] Sending order shipped email to: {}", order.getUser().getEmail());
        log.info("Order ID: {}, Tracking: {}", order.getId(), trackingNumber);
        
        String emailBody = buildOrderShippedEmail(order, trackingNumber);
        log.debug("Email body: \n{}", emailBody);
    }

    /**
     * G·ª≠i email th√¥ng b√°o ƒë∆°n h√†ng ƒë√£ giao th√†nh c√¥ng
     */
    public void sendOrderDeliveredEmail(Order order) {
        log.info("üìß [MOCK] Sending order delivered email to: {}", order.getUser().getEmail());
        
        String emailBody = buildOrderDeliveredEmail(order);
        log.debug("Email body: \n{}", emailBody);
    }

    /**
     * G·ª≠i email th√¥ng b√°o ƒë∆°n h√†ng b·ªã h·ªßy
     */
    public void sendOrderCancelledEmail(Order order, String reason) {
        log.info("üìß [MOCK] Sending order cancelled email to: {}", order.getUser().getEmail());
        
        String emailBody = buildOrderCancelledEmail(order, reason);
        log.debug("Email body: \n{}", emailBody);
    }

    /**
     * G·ª≠i email ch√†o m·ª´ng user m·ªõi
     */
    public void sendWelcomeEmail(User user) {
        log.info("üìß [MOCK] Sending welcome email to: {}", user.getEmail());
        
        String emailBody = buildWelcomeEmail(user);
        log.debug("Email body: \n{}", emailBody);
    }

    // ===== Email Templates =====

    private String buildOrderConfirmationEmail(Order order) {
        return String.format("""
                Xin ch√†o %s,
                
                C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i Sneakery Store!
                
                M√£ ƒë∆°n h√†ng: #%d
                T·ªïng ti·ªÅn: %,.0f VND
                Tr·∫°ng th√°i: %s
                
                Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng c·ªßa b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.
                
                Tr√¢n tr·ªçng,
                Sneakery Team
                """,
                order.getUser().getFullName(),
                order.getId(),
                order.getTotalAmount(),
                order.getStatus()
        );
    }

    private String buildOrderShippedEmail(Order order, String trackingNumber) {
        return String.format("""
                Xin ch√†o %s,
                
                ƒê∆°n h√†ng #%d c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao cho ƒë∆°n v·ªã v·∫≠n chuy·ªÉn.
                
                M√£ v·∫≠n ƒë∆°n: %s
                
                B·∫°n c√≥ th·ªÉ theo d√µi ƒë∆°n h√†ng qua m√£ v·∫≠n ƒë∆°n n√†y.
                
                Tr√¢n tr·ªçng,
                Sneakery Team
                """,
                order.getUser().getFullName(),
                order.getId(),
                trackingNumber != null ? trackingNumber : "Ch∆∞a c·∫≠p nh·∫≠t"
        );
    }

    private String buildOrderDeliveredEmail(Order order) {
        return String.format("""
                Xin ch√†o %s,
                
                ƒê∆°n h√†ng #%d c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng!
                
                C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i Sneakery Store.
                H√£y ƒë·ªÉ l·∫°i ƒë√°nh gi√° cho s·∫£n ph·∫©m ƒë·ªÉ gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán d·ªãch v·ª• nh√©.
                
                Tr√¢n tr·ªçng,
                Sneakery Team
                """,
                order.getUser().getFullName(),
                order.getId()
        );
    }

    private String buildOrderCancelledEmail(Order order, String reason) {
        return String.format("""
                Xin ch√†o %s,
                
                ƒê∆°n h√†ng #%d c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy.
                
                L√Ω do: %s
                
                N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.
                
                Tr√¢n tr·ªçng,
                Sneakery Team
                """,
                order.getUser().getFullName(),
                order.getId(),
                reason != null ? reason : "Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ"
        );
    }

    private String buildWelcomeEmail(User user) {
        return String.format("""
                Xin ch√†o %s,
                
                Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Sneakery Store!
                
                C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n. H√£y kh√°m ph√° b·ªô s∆∞u t·∫≠p gi√†y sneaker 
                ch·∫•t l∆∞·ª£ng cao c·ªßa ch√∫ng t√¥i.
                
                Ch√∫c b·∫°n mua s·∫Øm vui v·∫ª!
                
                Tr√¢n tr·ªçng,
                Sneakery Team
                """,
                user.getFullName()
        );
    }
}

