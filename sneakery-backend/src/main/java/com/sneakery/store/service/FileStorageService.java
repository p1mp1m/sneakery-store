package com.sneakery.store.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.*;
import java.util.UUID;

/**
 * Service: FileStorageService
 * ---------------------------
 * L∆∞u tr·ªØ file v·∫≠t l√Ω cho ·∫£nh s·∫£n ph·∫©m.
 * Th∆∞ m·ª•c uploads n·∫±m c√πng c·∫•p v·ªõi src/ (project root).
 */
@Slf4j
@Service
public class FileStorageService {

    /**
     * Th∆∞ m·ª•c g·ªëc l∆∞u file ‚Äî m·∫∑c ƒë·ªãnh: uploads/
     * C√≥ th·ªÉ override b·∫±ng app.file.upload-dir trong application.properties
     */
    @Value("${app.file.upload-dir:uploads}")
    private String rootUploadDir;

    /**
     * L∆∞u file ·∫£nh s·∫£n ph·∫©m th·∫≠t v√†o th∆∞ m·ª•c uploads/sanpham/{productId}/
     * @param productId id s·∫£n ph·∫©m
     * @param file file ·∫£nh
     * @return ƒë∆∞·ªùng d·∫´n URL t∆∞∆°ng ƒë·ªëi (v√≠ d·ª•: /uploads/sanpham/6/abc.jpg)
     */
    public String storeProductImage(Long productId, MultipartFile file) {
        if (file == null || file.isEmpty()) {
            throw new IllegalArgumentException("File upload r·ªóng ho·∫∑c null!");
        }

        try {
            // G·ªëc: uploads/
            Path rootPath = Paths.get(rootUploadDir).toAbsolutePath().normalize();

            // Th∆∞ m·ª•c: uploads/sanpham/{id}/
            Path targetDir = rootPath.resolve("sanpham/" + productId).normalize();
            Files.createDirectories(targetDir);

            // T·∫°o t√™n file duy nh·∫•t
            String originalName = StringUtils.cleanPath(file.getOriginalFilename());
            String ext = "";

            int dotIndex = originalName.lastIndexOf('.');
            if (dotIndex >= 0) ext = originalName.substring(dotIndex);

            String newName = UUID.randomUUID() + ext;
            Path targetPath = targetDir.resolve(newName);

            // Ghi file v·∫≠t l√Ω
            Files.copy(file.getInputStream(), targetPath, StandardCopyOption.REPLACE_EXISTING);

            // Tr·∫£ v·ªÅ URL d√πng trong FE
            String relativeUrl = "/uploads/sanpham/" + productId + "/" + newName;
            log.info("üìÅ ƒê√£ l∆∞u file: {}", relativeUrl);

            return relativeUrl;
        } catch (IOException e) {
            log.error("‚ùå L·ªói khi l∆∞u file s·∫£n ph·∫©m {}: {}", productId, e.getMessage());
            throw new RuntimeException("Kh√¥ng th·ªÉ l∆∞u file: " + e.getMessage());
        }
    }

    /**
     * X√≥a file v·∫≠t l√Ω theo URL (VD: /uploads/sanpham/6/abc.jpg)
     */
    public void deleteFileByUrl(String imageUrl) {
        if (imageUrl == null || imageUrl.isBlank()) return;

        try {
            String cleaned = imageUrl.startsWith("/") ? imageUrl.substring(1) : imageUrl;
            Path filePath = Paths.get(cleaned).toAbsolutePath().normalize();

            if (Files.exists(filePath)) {
                Files.delete(filePath);
                log.info("üóëÔ∏è ƒê√£ x√≥a file: {}", filePath);
            } else {
                log.warn("‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i: {}", filePath);
            }
        } catch (IOException e) {
            log.error("‚ùå Kh√¥ng th·ªÉ x√≥a file: {}", e.getMessage());
        }
    }
}
