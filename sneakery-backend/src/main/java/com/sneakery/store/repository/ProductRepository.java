package com.sneakery.store.repository;

import com.sneakery.store.entity.Product;
import org.springframework.data.domain.Page; // üëà Import Page
import org.springframework.data.domain.Pageable; // üëà Import Pageable
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Optional;

public interface ProductRepository extends JpaRepository<Product, Long> {

    /**
     * L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m v√† JOIN FETCH c√°c bi·∫øn th·ªÉ li√™n quan.
     * ƒêi·ªÅu n√†y gi√∫p gi·∫£i quy·∫øt l·ªói LazyInitializationException v√† t·ªëi ∆∞u hi·ªáu nƒÉng.
     * "LEFT JOIN" ƒë·∫£m b·∫£o s·∫£n ph·∫©m v·∫´n ƒë∆∞·ª£c l·∫•y ngay c·∫£ khi n√≥ ch∆∞a c√≥ bi·∫øn th·ªÉ n√†o.
     * "DISTINCT" ƒë·ªÉ tr√°nh tr·∫£ v·ªÅ c√°c s·∫£n ph·∫©m b·ªã tr√πng l·∫∑p.
     */
    @Query("SELECT DISTINCT p FROM Product p LEFT JOIN FETCH p.variants")
    List<Product> findAllWithVariants();

    // Thay ƒë·ªïi ph∆∞∆°ng th·ª©c ƒë·ªÉ nh·∫≠n Pageable v√† tr·∫£ v·ªÅ Page
    @Query(value = "SELECT DISTINCT p FROM Product p LEFT JOIN FETCH p.variants",
            countQuery = "SELECT COUNT(DISTINCT p) FROM Product p")
    Page<Product> findAllWithVariants(Pageable pageable);

    @Query(value = "SELECT DISTINCT p FROM Product p " +
            "JOIN FETCH p.variants v " +
            "JOIN FETCH p.brand b",
            countQuery = "SELECT COUNT(DISTINCT p) FROM Product p JOIN p.variants v")
    Page<Product> findAllWithDetails(Pageable pageable);

    @Query("SELECT p FROM Product p " +
            "LEFT JOIN FETCH p.brand " +
            "LEFT JOIN FETCH p.categories " +
            "LEFT JOIN FETCH p.variants " +
            "WHERE p.id = :productId")
    Optional<Product> findByIdWithDetails(@Param("productId") Long productId);
}